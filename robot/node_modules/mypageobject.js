// an example of a page object class
class AccountSettingsPage {

    constructor(page, logger, playwright) {
        this.playwright = playwright; // had to add this
        this.page = page;
        this.logger = logger;
        logger(`playwright: ${this.playwright}`)
        logger(`page: ${this.page}`)
        logger(`logger: ${this.logger}`)
        // The Browser library doesn't give us a good way to inject
        // information into a keyword other than passing it in, which
        // can be tedious.
        //
        // To work around that, the robot task will create an environment
        // variable with some information a page object might need.
        this.org_info = JSON.parse(process.env.CCI_ORG_INFO)
    }

    async doSomething(arg1, arg2) {
        return `arg1: ${arg1} arg2: ${arg2}`
    }
    async goto(section_name) {
        this.logger(`current page url? ${this.page.url()}`)
        let url=this.org_info.instance_url +
            '/lightning/settings/personal/PersonalInformation/home';

        this.logger(`goto url: ${url}`)
        await this.page.goto(url, {waitUntil: 'networkidle'});

        if (section_name) {
            // This waiting isn't sufficient; not sure what the better solution is.
            // Wait for the iframe?
            // I'm seeing the title render right away, but the inner iframe is blank
            // if I immediately take a screenshot.
            await this.page.click("text=Advanced User Details", {waitUntil: 'networkidle'})
            this.page.waitForSelector('iframe')
        }
    }
}

// Example of a robot keyword that uses the page object
// Calling the keyword with no arguments returns an instance
// of the page object, which isn't particularly useful.
// A method name can be specified as the first argument, and
// additonal arguments can be supplied which will be passed on
// to that method.
//
// note to self: The Browswer library can't handle `null` as the
// default value of func
async function accountSettingsPage(method="", args, page, logger, playwright) {
    let po = new AccountSettingsPage(page, logger, playwright)

    if (method == "") {
        return po;
    } else {
        method_name=method.replaceAll(" ", "_");
        return po[method_name](...args);
    }
}

exports.__esModule = true;
module.exports = {
    'accountSettingsPage': accountSettingsPage
}
